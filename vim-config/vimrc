source ~/dotfiles/vim-config/bundles.vim
"setting goes here
syntax on
syntax enable
set relativenumber
filetype plugin indent on 
set noswapfile
set incsearch
set ignorecase
set history=1000
set title
set expandtab
set autoindent
set mouse=a
set spell
set cursorline
set clipboard=unnamed
set backspace=indent,eol,start " Make backspace behave normally.
set wildmode=list:longest,full
set wildmenu
set tabstop=2 shiftwidth=2 softtabstop=2
set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
set t_Co=256
set undodir=~/.vim/undodir
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save
colorscheme solarized
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=16
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"



source ~/dotfiles/vim-config/key-bindings.vim

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neocomplete#force_overwrite_completefunc = 1
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

"Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme= 'badwolf'
let g:airline#extensions#branch#enabled = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.branch = 'ðŸ˜ˆ'  
let g:airline#extensions#branch#empty_message = 'No branch'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#syntastic#enabled= 1
let g:airline#extensions#unite#enable= 1
let g:airline#extensions#tmuxline#enable= 1
let g:airline#extensions#hunks#enable= 1
let g:tmuxline_theme = 'vim_powerline'
let g:tomato#interval = 60 * 60
let g:tomato#remind = "â˜»"
let g:tomato#restinfo = "â˜º"
let g:gitgutter_enabled = 0

"Signify"
let g:signify_disable_by_default = 1
let g:signify_mapping_toggle = '<leader>gt'
let g:signify_mapping_next_hunk = '<leader>gj'
let g:signify_mapping_prev_hunk = '<leader>gk'
let g:signify_mapping_toggle_highlight = '<leader>gh'

let g:cssColorVimDoNotMessMyUpdatetime = 1

"Starify settings
let g:startify_custom_footer =
      \ map(split(system('tips | cowsay here comes the mighty weapon'), '\n'), '"   ". v:val') + ['']
let g:startify_custom_header= [
      \ ' _      _   _                 _ _   ',
      \ '| |    | | ( )               | | | ',
      \ '| | ___| |_|/ ___   _ __ ___ | | | ',
      \ '| |/ _ \ __| / __| |  __/ _ \| | |  ',
      \ '| |  __/ |_  \__ \ | | | (_) | | | ',
      \ '|_|\___|\__| |___/ |_|  \___/|_|_| ', 
      \ '',
      \ '',
      \ ]
let g:startify_files_number        = 10
let g:startify_session_persistence = 1
let g:startify_session_autoload    = 1
let g:startify_enable_special      = 0
let g:startify_files_number        = 5
let g:startify_change_to_dir       = 0

"Easy motion leader key-mapping
let g:EasyMotion_leader_key = '<Leader><Leader>'

"Nerdtree settings
autocmd VimEnter * NERDTree
autocmd VimEnter * NERDTreeMirror
autocmd VimEnter * NERDTreeTabsOpen 
autocmd VimEnter * wincmd p

"vimfiler settings
"let g:vimfiler_as_default_explorer = 1
"autocmd VimEnter * VimFilerExplorer
"autocmd VimEnter * wincmd p

"Syntastic customization
let g:syntastic_error_symbol = 'âœ—'
let g:syntastic_style_error_symbol = 'âœ '
let g:syntastic_warning_symbol = 'âˆ†'
let g:syntastic_style_warning_symbol = 'â˜¢'

"VimShell settings and key mappings
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_prompt =  '~~> '

"mult cursor  plugin
let g:multi_cursor_next_key='<C-m>'


"emmet zencoding
let g:user_emmet_settings = {
      \  'php' : {
      \    'extends' : 'html',
      \    'filters' : 'c',
      \  },
      \  'xml' : {
      \    'extends' : 'html',
      \  },
      \  'haml' : {
      \    'extends' : 'html',
      \  },
      \  'eruby' : {
      \    'extends' : 'html',
      \  },
      \}

"Matchit vim
runtime! macros/matchit.vim
au Filetype css,javascript
      \ let b:match_words = &matchpairs


let g:multi_cursor_use_default_mapping=0
let g:mustache_abbreviations = 1
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

if &term =~ '^screen'
  " Page keys http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/FAQ
  execute "set t_kP=\e[5;*~"
  execute "set t_kN=\e[6;*~"

  " Arrow keys http://unix.stackexchange.com/a/34723
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif
