if has('vim_starting')
  set nocompatible               " Be iMproved
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))


"setting goes here
let mapleader=" "
syntax on
set relativenumber
filetype plugin indent on 
set noswapfile
set incsearch
set ignorecase
set history=1000
set title
set expandtab
set autoindent
set mouse=a
set spell
set cursorline
set clipboard=unnamed
set backspace=indent,eol,start " Make backspace behave normally.
set wildmode=list:longest,full
set wildmenu
set tabstop=2 shiftwidth=2 softtabstop=2
set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
set t_Co=256
set undodir=~/.vim/undodir
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save
colorscheme solarized
set background=dark
"let g:solarized_termtrans=1
"let g:solarized_termcolors=16
"let g:solarized_contrast="normal"
"let g:solarized_visibility="normal"

"key mappings to normal vim actions
nnoremap <leader>t :tabnew<CR>
nnoremap <leader>q :q<CR>
nnoremap Q :q!<CR>                             "avoid entering ex mode 
nnoremap <leader>w :w<CR>
nnoremap <leader>x :x<CR>
nnoremap <leader>ev :e ~/.vimrc<CR>
nnoremap <leader>so :so %<CR>
nnoremap <leader>p :set paste! <CR>
nnoremap <leader>s :%s/
nnoremap <C-s> :w<CR>
nnoremap <Leader>g gg=G<bar>gi<Esc>
inoremap jk <Esc>
vnoremap jk <Esc>
nnoremap j gj
nnoremap k gk
nnoremap 0 g0
nnoremap $ g$
nnoremap > :tabnext<CR>
nnoremap < :tabprevious<CR>
nnoremap <Leader>te :tabe 
nnoremap F :bnext<CR>
nnoremap B :bprevious<CR>

" Copy to 'clipboard registry'
vmap <C-c> "+y
nmap <C-a> ggVG
vmap <C-x> dd

"nnoremap <leader>bi :VimShellPop<CR>bundle install<CR>exit<CR>
"nnoremap <leader>bi :!bundle install<CR>
"nnoremap <Leader>bi :Vim
"nnoremap <leader>bi :call feedkeys("bundle install\<lt>CR>exit\<lt>CR>", "t")<Bar>VimShellPop<CR>
nnoremap <leader>bi :call feedkeys("bundle install\<lt>CR>", "t")<Bar>VimShellPop<CR>
"nnoremap <leader>bi :new<Bar>0r!bundle install<CR>

"key mappings for plugins
nnoremap <leader>ntt :NERDTreeTabsOpen<CR>
nnoremap <leader>nt :NERDTree<CR>
nnoremap <leader>nbi :NeoBundleInstall<CR>
nnoremap <leader>np :Nyancat<CR>
nnoremap <leader>fc :VimFilerCurrentDir<CR>
nnoremap <leader>fb :VimFilerBufferDir<CR>
nnoremap <leader>fi :VimFilerExplorer<CR>
nnoremap <leader>vs :VimShellPop<CR>
nnoremap <leader>vt :VimShellTab<CR>

"Rails vim key-mappings
nnoremap <leader>rr :e config/routes.rb<CR>
nnoremap <leader>rv :Rview<space>
nnoremap <leader>rc :Rcontroller<space>
nnoremap <leader>rg :Rgenerate<space>
nnoremap <leader>rx :Rextract<space>
nnoremap <leader>rm :Rmodel<space>
nnoremap <leader>rs :Rstylesheet<space>
nnoremap <leader>rj :Rjavascript<space>
nnoremap <leader>ge :e Gemfile<CR>

"map arrowkey to change viewports size
nnoremap <Left> :vertical resize -5<CR>
nnoremap <Right> :vertical resize +5<CR>
nnoremap <Up> :resize -5<CR>
nnoremap <Down> :resize +5<CR>


" Unite
nmap , [unite]
nnoremap [unite] <nop>
let g:unite_source_history_yank_enable = 1
"call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <silent> [unite]t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:! file_mru<cr>
nnoremap <silent> [unite]vv :<C-u>Unite -start-insert -no-split -buffer-name=file_vcs file/vcs<CR>
nnoremap <silent> [unite]f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
nnoremap <silent> [unite]r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
nnoremap <silent> [unite]op :<C-u>Unite -no-split -buffer-name=outline  -auto-preview outline<cr>
nnoremap <silent> [unite]oo :<C-u>Unite -no-split -quick-match -buffer-name=outline  outline<cr>
nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yank    history/yank<cr>
nnoremap <silent> [unite]e :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>
nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>
nnoremap <silent> [unite]ft :Unite file_rec/async -default-action=tabopen<cr>
nnoremap <silent> [unite]fs :Unite file_rec/async -default-action=split<cr>
nnoremap <silent> [unite]fv :Unite file_rec/async -default-action=vsplit<cr>
nnoremap <silent> [unite]fp :Unite -no-split -buffer-name=files -default-action=preview file<cr>
nnoremap <silent> [unite]fa :Unite -no-split -start-insert -auto-preview file_rec/async <cr>
nnoremap <silent> [unite]fc :Unite file_rec/async<cr>
let g:unite_source_rec_async_command = 'ack -f --nofilter'

"Fugitive 
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>ga :Git add -A<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gremove<CR>

" Select all text
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
runtime! macros/matchit.vim
au BufNewFile,BufRead *.erb set filetype=eruby.html

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neocomplete#force_overwrite_completefunc = 1
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

"Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"let g:move_key_modifier = 'C'
"let g:Powerline_symbols = 'fancy'
"let g:lightline = {
      "\ 'colorscheme': 'powerline',
      "\ 'active': {
      "\   'left': [ [ 'mode', 'paste' ],
      "\             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      "\ },
      "\ 'component': {
      "\   'readonly': '%{&readonly?"x":""}',
      "\ },
      "\ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      "\ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      "\ }


      "\ 'separator': { 'left': '', 'right': '' },
      "\ 'subseparator': { 'left': '|', 'right': '|' }
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme= 'wombat'
let g:airline#extensions#branch#enabled = 1
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif
  let g:airline_symbols.branch = 'ðŸ˜ˆ'  
let g:airline#extensions#branch#empty_message = 'No branch'


let g:cssColorVimDoNotMessMyUpdatetime = 1

"Starify settings
let g:startify_custom_footer =
            \ map(split(system('tips | cowsay here comes the mighty weapon'), '\n'), '"   ". v:val') + ['']
let g:startify_custom_header= [
      \ ' _      _   _                 _ _   ',
      \ '| |    | | ( )               | | | ',
      \ '| | ___| |_|/ ___   _ __ ___ | | | ',
      \ '| |/ _ \ __| / __| |  __/ _ \| | |  ',
      \ '| |  __/ |_  \__ \ | | | (_) | | | ',
      \ '|_|\___|\__| |___/ |_|  \___/|_|_| ', 
      \ '',
      \ '',
      \ ]
let g:startify_files_number        = 10
let g:startify_session_persistence = 1
let g:startify_session_autoload    = 1
let g:startify_enable_special      = 0
let g:startify_files_number        = 5
let g:startify_change_to_dir       = 0

"Easy motion leader key-mapping
let g:EasyMotion_leader_key = '<Leader><Leader>'

"Nerdtree settings
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p
autocmd VimEnter * NERDTreeTabsOpen 
autocmd VimEnter * NERDTreeMirror

"vimfiler settings
"let g:vimfiler_as_default_explorer = 1
"autocmd VimEnter * VimFilerExplorer
"autocmd VimEnter * wincmd p

"Syntastic customization
let g:syntastic_error_symbol = 'âœ—'
let g:syntastic_style_error_symbol = 'âœ '
let g:syntastic_warning_symbol = 'âˆ†'
let g:syntastic_style_warning_symbol = 'â˜¢'

"VimShell settings and key mappings
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_prompt =  '~~> '

"mult cursor  plugin
let g:multi_cursor_next_key='<C-m>'


"emmet zencoding
let g:user_emmet_settings = {
      \  'php' : {
      \    'extends' : 'html',
      \    'filters' : 'c',
      \  },
      \  'xml' : {
      \    'extends' : 'html',
      \  },
      \  'haml' : {
      \    'extends' : 'html',
      \  },
      \  'eruby' : {
      \    'extends' : 'html',
      \  },
      \}

"Matchit vim
runtime! macros/matchit.vim
au Filetype css,javascript
      \ let b:match_words = &matchpairs

"<---------------------Bundles--------------------->

"shougo's plugins
NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/vimshell.vim'
NeoBundle "Shougo/unite.vim"
NeoBundle "Shougo/unite-outline"
NeoBundle 'Shougo/vimproc'
NeoBundleFetch 'Shougo/neobundle.vim'              "Let NeoBundle manage NeoBundle

"tpope's plugins
NeoBundle 'tpope/vim-fugitive'                     "git inside vim
NeoBundle 'tpope/vim-repeat'                       "Helps to repeat previous command with . key
NeoBundle 'tpope/vim-endwise.git'                  "To enable automatic end in loops
NeoBundle 'tpope/vim-surround.git'                 "autocomplete all brakets and quotes
NeoBundle 'tpope/vim-rake.git'
NeoBundle 'tpope/vim-rails.git'
NeoBundle 'tpope/vim-markdown.git'

" All scrooloose plugins  
NeoBundle "scrooloose/syntastic"                   "to highlight syntax
NeoBundle 'scrooloose/nerdcommenter'               "to autocommenting based on file type
NeoBundle "scrooloose/nerdtree"                    "classic file explorer

"NeoBundle 'gmarik/vundle'                         "replaced it with neobundle
NeoBundle 'Lokaltog/vim-easymotion'                "make moving inside file real easy
NeoBundle 'justinmk/vim-sneak'
NeoBundle "terryma/vim-multiple-cursors"           " Multiple cursor like sublime
NeoBundle "jistr/vim-nerdtree-tabs"                "must have plugin for nerdtree
NeoBundle 'Raimondi/delimitMate'                   "Quotes autocomplete
NeoBundle 'rstacruz/sparkup', {'rtp': 'vim/'}

"NeoBundle "spolu/dwm.vim"                         "Window Tile manager
NeoBundle "mbbill/undotree"                        "Undo tree that help while undoing things
NeoBundle "mhinz/vim-startify"                     "keeps histroy of previously opened files
NeoBundle 'christoomey/vim-tmux-navigator'         "to navigate between tmux windows
"NeoBundle 'Valloric/YouCompleteMe'                "replaced with neocomplete
NeoBundle 'chriskempson/base16-vim'                "Colors to vim
NeoBundle 'matze/vim-move'                         "<A-k>   Move current line/selection up,  <A-j>   Move current line/selection down

NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'Keithbsmiley/rspec.vim'

"Markdown
NeoBundle 'nelstrom/vim-markdown-folding.git'

NeoBundle 'Rip-Rip/clang_complete'
NeoBundle "MarcWeber/vim-addon-mw-utils"
NeoBundle "tomtom/tlib_vim"

"Helps in aligning text
NeoBundle 'godlygeek/tabular'
NeoBundle 'Yggdroot/indentLine'

"For html css javascript and coffeescript
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'ap/vim-css-color'
NeoBundle 'othree/html5.vim'
NeoBundle 'honza/vim-snippets'                      "Snippets
NeoBundle 'pangloss/vim-javascript'
NeoBundle "garbas/vim-snipmate"

"colors to vim
NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'dhruvasagar/vim-railscasts-theme'
NeoBundle 'altercation/vim-colors-solarized.git'
"NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'bling/vim-airline'
NeoBundle 'Zuckonit/vim-airline-tomato'
NeoBundle 'gabrielelana/pomicons'
NeoBundle 'FredKSchott/CoVim'
NeoBundle 'itchyny/calendar.vim'
"NeoBundle 'itchyny/lightline.vim'

"NeoBundle 'itchyny/dictionary.vim'
NeoBundle 'koron/nyancat-vim'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'L9'
NeoBundle 'FuzzyFinder'
NeoBundle 'https://bitbucket.org/ns9tks/vim-fuzzyfinder'
"NeoBundle 'majutsushi/tagbar'
NeoBundleCheck                                     "Installation check.
